 $ terraform apply

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.vpc.aws_eip.EIP-NATGW will be created
  + resource "aws_eip" "EIP-NATGW" {
      + allocation_id     = (known after apply)
      + association_id    = (known after apply)
      + customer_owned_ip = (known after apply)
      + domain            = (known after apply)
      + id                = (known after apply)
      + instance          = (known after apply)
      + network_interface = (known after apply)
      + private_dns       = (known after apply)
      + private_ip        = (known after apply)
      + public_dns        = (known after apply)
      + public_ip         = (known after apply)
      + public_ipv4_pool  = (known after apply)
      + vpc               = true
    }

  # module.vpc.aws_internet_gateway.IGW will be created
  + resource "aws_internet_gateway" "IGW" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Environment" = "Prod"
          + "Name"        = "IGW-VPC-10-39"
        }
      + vpc_id   = (known after apply)
    }

  # module.vpc.aws_nat_gateway.NAT will be created
  + resource "aws_nat_gateway" "NAT" {
      + allocation_id        = (known after apply)
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags                 = {
          + "Environment" = "Prod"
          + "Name"        = "NAT-VPC-10-39"
        }
    }

  # module.vpc.aws_route_table.OUT-IGW will be created
  + resource "aws_route_table" "OUT-IGW" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = (known after apply)
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = ""
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Environment" = "Prod"
          + "Name"        = "OUT-IGW-VPC-10-39"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table.OUT-NAT will be created
  + resource "aws_route_table" "OUT-NAT" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = ""
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = (known after apply)
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Environment" = "Prod"
          + "Name"        = "OUT-NAT-VPC-10-39"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table_association.BE-ZA-NAT will be created
  + resource "aws_route_table_association" "BE-ZA-NAT" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.BE-ZB-NAT will be created
  + resource "aws_route_table_association" "BE-ZB-NAT" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.BE-ZC-NAT will be created
  + resource "aws_route_table_association" "BE-ZC-NAT" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.DB-ZA-NAT will be created
  + resource "aws_route_table_association" "DB-ZA-NAT" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.DB-ZB-NAT will be created
  + resource "aws_route_table_association" "DB-ZB-NAT" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.DB-ZC-NAT will be created
  + resource "aws_route_table_association" "DB-ZC-NAT" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.FE-ZA-IGW will be created
  + resource "aws_route_table_association" "FE-ZA-IGW" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.FE-ZB-IGW will be created
  + resource "aws_route_table_association" "FE-ZB-IGW" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.FE-ZC-IGW will be created
  + resource "aws_route_table_association" "FE-ZC-IGW" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_subnet.BE-ZA will be created
  + resource "aws_subnet" "BE-ZA" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.39.3.0/25"
      + id                              = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Description" = "Backend Zone A"
          + "Environment" = "Prod"
          + "Name"        = "BE-ZA-VPC-10-39"
        }
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_subnet.BE-ZB will be created
  + resource "aws_subnet" "BE-ZB" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.39.3.128/25"
      + id                              = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Description" = "Backend Zone B"
          + "Environment" = "Prod"
          + "Name"        = "BE-ZB-VPC-10-39"
        }
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_subnet.BE-ZC will be created
  + resource "aws_subnet" "BE-ZC" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1c"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.39.4.0/25"
      + id                              = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Description" = "Backend Zone C"
          + "Environment" = "Prod"
          + "Name"        = "BE-ZC-VPC-10-39"
        }
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_subnet.DB-ZA will be created
  + resource "aws_subnet" "DB-ZA" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.39.1.128/25"
      + id                              = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Description" = "Database Zone A"
          + "Environment" = "Prod"
          + "Name"        = "BD-ZA-VPC-10-39"
        }
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_subnet.DB-ZB will be created
  + resource "aws_subnet" "DB-ZB" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.39.2.0/25"
      + id                              = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Description" = "Database Zone B"
          + "Environment" = "Prod"
          + "Name"        = "BD-ZB-VPC-10-39"
        }
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_subnet.DB-ZC will be created
  + resource "aws_subnet" "DB-ZC" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1c"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.39.2.128/25"
      + id                              = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Description" = "Database Zone C"
          + "Environment" = "Prod"
          + "Name"        = "BD-ZC-VPC-10-39"
        }
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_subnet.FE-ZA will be created
  + resource "aws_subnet" "FE-ZA" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.39.0.0/25"
      + id                              = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Description" = "Frontend Zone A"
          + "Environment" = "Prod"
          + "Name"        = "FE-ZA-VPC-10-39"
        }
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_subnet.FE-ZB will be created
  + resource "aws_subnet" "FE-ZB" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.39.0.128/25"
      + id                              = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Description" = "Frontend Zone B"
          + "Environment" = "Prod"
          + "Name"        = "FE-ZB-VPC-10-39"
        }
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_subnet.FE-ZC will be created
  + resource "aws_subnet" "FE-ZC" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1c"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.39.1.0/25"
      + id                              = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Description" = "Frontend Zone C"
          + "Environment" = "Prod"
          + "Name"        = "FE-ZC-VPC-10-39"
        }
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_vpc.VPC will be created
  + resource "aws_vpc" "VPC" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "10.39.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = true
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Environment" = "Prod"
          + "Name"        = "VPC-10-39"
        }
    }

Plan: 24 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.vpc.aws_vpc.VPC: Creating...
module.vpc.aws_vpc.VPC: Creation complete after 8s [id=vpc-038cfc38c4552e443]
module.vpc.aws_internet_gateway.IGW: Creating...
module.vpc.aws_subnet.DB-ZC: Creating...
module.vpc.aws_subnet.BE-ZC: Creating...
module.vpc.aws_subnet.DB-ZA: Creating...
module.vpc.aws_subnet.BE-ZA: Creating...
module.vpc.aws_subnet.FE-ZB: Creating...
module.vpc.aws_subnet.FE-ZA: Creating...
module.vpc.aws_subnet.DB-ZB: Creating...
module.vpc.aws_subnet.FE-ZC: Creating...
module.vpc.aws_subnet.BE-ZB: Creating...
module.vpc.aws_subnet.BE-ZB: Creation complete after 2s [id=subnet-0535ac5a7fa31e052]
module.vpc.aws_subnet.FE-ZB: Creation complete after 2s [id=subnet-0d4f08696d42a25d2]
module.vpc.aws_subnet.BE-ZC: Creation complete after 2s [id=subnet-0d8777054b5b77fa7]
module.vpc.aws_subnet.DB-ZB: Creation complete after 2s [id=subnet-0e3246df607797bd8]
module.vpc.aws_subnet.DB-ZC: Creation complete after 2s [id=subnet-02ede21cad9163936]
module.vpc.aws_subnet.BE-ZA: Creation complete after 2s [id=subnet-06cef24909c044f5f]
module.vpc.aws_subnet.FE-ZA: Creation complete after 2s [id=subnet-098daee0a8a4f7868]
module.vpc.aws_subnet.FE-ZC: Creation complete after 2s [id=subnet-0462f4c8714a86c1b]
module.vpc.aws_subnet.DB-ZA: Creation complete after 2s [id=subnet-08b090664e3f122d6]
module.vpc.aws_internet_gateway.IGW: Creation complete after 3s [id=igw-00bec193ea2ffcdaa]
module.vpc.aws_eip.EIP-NATGW: Creating...
module.vpc.aws_route_table.OUT-IGW: Creating...
module.vpc.aws_eip.EIP-NATGW: Creation complete after 2s [id=eipalloc-0c2bffeff1156b0b3]
module.vpc.aws_nat_gateway.NAT: Creating...
module.vpc.aws_route_table.OUT-IGW: Creation complete after 3s [id=rtb-0df9e839c8d335982]
module.vpc.aws_route_table_association.FE-ZC-IGW: Creating...
module.vpc.aws_route_table_association.FE-ZA-IGW: Creating...
module.vpc.aws_route_table_association.FE-ZB-IGW: Creating...
module.vpc.aws_route_table_association.FE-ZB-IGW: Creation complete after 1s [id=rtbassoc-0bd598fe1756ed993]
module.vpc.aws_route_table_association.FE-ZA-IGW: Creation complete after 1s [id=rtbassoc-09483a2ee5f2f6ef0]
module.vpc.aws_route_table_association.FE-ZC-IGW: Creation complete after 1s [id=rtbassoc-0ac0b0a93fcaf8f7b]
module.vpc.aws_nat_gateway.NAT: Still creating... [10s elapsed]
module.vpc.aws_nat_gateway.NAT: Still creating... [20s elapsed]
module.vpc.aws_nat_gateway.NAT: Still creating... [30s elapsed]
module.vpc.aws_nat_gateway.NAT: Still creating... [40s elapsed]
module.vpc.aws_nat_gateway.NAT: Still creating... [50s elapsed]
module.vpc.aws_nat_gateway.NAT: Still creating... [1m0s elapsed]
module.vpc.aws_nat_gateway.NAT: Still creating... [1m10s elapsed]
module.vpc.aws_nat_gateway.NAT: Still creating... [1m20s elapsed]
module.vpc.aws_nat_gateway.NAT: Still creating... [1m30s elapsed]
module.vpc.aws_nat_gateway.NAT: Still creating... [1m40s elapsed]
module.vpc.aws_nat_gateway.NAT: Creation complete after 1m49s [id=nat-0c44ca6431e58af42]
module.vpc.aws_route_table.OUT-NAT: Creating...
module.vpc.aws_route_table.OUT-NAT: Creation complete after 4s [id=rtb-08a6eee0121c31db5]
module.vpc.aws_route_table_association.BE-ZB-NAT: Creating...
module.vpc.aws_route_table_association.DB-ZB-NAT: Creating...
module.vpc.aws_route_table_association.BE-ZC-NAT: Creating...
module.vpc.aws_route_table_association.DB-ZA-NAT: Creating...
module.vpc.aws_route_table_association.DB-ZC-NAT: Creating...
module.vpc.aws_route_table_association.BE-ZA-NAT: Creating...
module.vpc.aws_route_table_association.BE-ZC-NAT: Creation complete after 0s [id=rtbassoc-0a68ddb6af7f67c86]
module.vpc.aws_route_table_association.DB-ZA-NAT: Creation complete after 1s [id=rtbassoc-0103b7e84dfab7d3e]
module.vpc.aws_route_table_association.DB-ZC-NAT: Creation complete after 1s [id=rtbassoc-078d1c69fe479830e]
module.vpc.aws_route_table_association.BE-ZA-NAT: Creation complete after 1s [id=rtbassoc-02cee1729af4e1af2]
module.vpc.aws_route_table_association.DB-ZB-NAT: Creation complete after 1s [id=rtbassoc-0145d6e2d7ab5a28d]
module.vpc.aws_route_table_association.BE-ZB-NAT: Creation complete after 1s [id=rtbassoc-0596baed593096662]

Apply complete! Resources: 24 added, 0 changed, 0 destroyed.

Outputs:

BE-ZA_id = subnet-06cef24909c044f5f
BE-ZB_id = subnet-0535ac5a7fa31e052
BE-ZC_id = subnet-0d8777054b5b77fa7
DB-ZA_id = subnet-08b090664e3f122d6
DB-ZC_id = subnet-02ede21cad9163936
FE-ZA_id = subnet-098daee0a8a4f7868
FE-ZB_id = subnet-0d4f08696d42a25d2
FE-ZC_id = subnet-0462f4c8714a86c1b
VPC_id = vpc-038cfc38c4552e443